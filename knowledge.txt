1. cấu trúc thư mục
a, app
- tất cả code được chứa trong folder app
- console: (laravel 11 k có) tất cả các câu lệnh ở môi
trường command line. khi viết ứng dụng, sẽ có ứng dụng
chạy trên trình duyệt thông qua giao thức http nhưng
cũng có code chạy qua console
- exception (laravel 11 k có) chứa những files liên
quan đến điều hướng lỗi
- http:


2. route
Route::get($uri, $callback);
Route::post($uri, $callback);  submit form, tạo mới tài nguyên lên hệ thống
Route::put($uri, $callback);  cập nhật tất cả
Route::patch($uri, $callback);  cập nhật từng phần
Route::delete($uri, $callback);
Route::options($uri, $callback);

- laravel cung cấp các method phù hợp với phương thức http
để tương tác thoải mái với giao thức http
- ngoài còn 2 methods khác là match và any

Route::match(['get', 'post'], '/', function () {
    // cùng 1 đường dẫn thì có thể chứa nhiều phương thức
});

Route::any('/', function () {
    // trên 1 đường dẫn có thể chứa tất cả phương thức
});

3. Vòng đời request
- Đầu tiên chạy vào public/index.php
- Chạy vào bootstrap/app.php

- đối với các phiên bản trước, sau khi vào
bootstrap/app.php thì vào App\Http\Kernel::class
- tại Kernel lọc rất nhiều thứ. Tức là trc đi đến bước xử lý
request thì thông qua Kernel
- đến provider để chạy các service
- router
- middleware là bộ lọc request, kiểm tra thỏa mãn đk mới được đi tiếp,
k thỏa mãn thì dừng lại và chuyển sang hướng khác
- controller
- sau đó hoặc trả về view và response cho client (Cụ thể là trình duyệt)
- hoặc trả về kết quả (vd trong th viết api thì trả json hoặc xml)
- trả về trình duyệt (browser)


4. Cấu hình cần thiết
- cấu hình trong folder config và bootstrap
- trong .env
- tạo application key -> php artisan key:generate
- thiết lập timezone -> config/app.php
- thiết lập môi trường -> .env
- thiết lập csdl -> .env
- bật chế độ bảo trì -> php artisan down


5. router
- định tuyến các url path tương ứng với các controller,
action, view, command line tương ứng hoặc bất kì công việc
nào (trong phạm vi cho phép của fr đó)
- có 4 loại route (web, api, console, channel)


6. request
(?) Tìm hiểu ý nghĩa của Laravel Request, nó được sử dụng để làm gì?
- Laravel Request là 1 class được xây dwujng sẵn để cung cấp dữ liệu
HTTP Request và cho phép thao tác với các HTTP Request
-

(?) Làm thế để sử dụng Laravel Request
- use Illuminate\Http\Request
- Khai báo Request là 1 tham số của phương thức

(?) Tìm hiểu các phương thức và thuộc tính của Request
- lấy ra danh sách tất cả dữ liệu của request hiện tại $request->all()
- $request->path()
- $request->is()
- $request->url()
- $request->fullUrl()
- $request->method()
- $request->isMethod()
- $request->ip()
- $request->server()
- $request->header()
- $request->input()
- $request->name
- $request->query() trả về mảng, chỉ hiện query string, k lấy data qua form được
- $request->has()  ktra có trường name_category k chứ k phải ktra xem nó có được gửi data k
- $request->flash() đưa tất cả các dữ liệu input vào trong session (session chỉ tồn tại
trong tgian ngắn, tự độ xóa khi reload)
- $request->old()
- $request->file()

(?) Tìm hiều các helper của request (các helper có thể sử dụng luôn ở controller
hoặc sử dụng nhiều ở view)
- request() thường dùng để gọi view
- request('key', 'default')
- old('key', 'default')


7. Response
- Mỗi request từ trình duyệt gửi lên máy chủ web. Sau đó, serve xử lý và trả
về respone
- Response là kết quả trả về (có thể là nội dung hay đi kèm với các thông tin)
- Trả về trình duyệt để hiển thị cho người dùng
- Laravel cung cấp rất nhiều phương thức để trả về các Response, các Response
có thể được trả về tại các Route hoặc các phương thức của Controller

a. HTTP Response cơ bản
- Cơ bản nhất là trả về ngay tại route ở dạng chuỗi hoặc mảng (router/controller)
- return view()

b. HTTP Response Instance

Thay đổi trạng thái của Response
- Mặc định thành công thì trả 200, tuy nhiên với TH api, không muốn dùng
response mặc định (tìm hiểu response code)
- successfull 200-299

Trả về response dạng json

Trả về response dạng chuyển hướng redirect


Gán thông tin header vào response


Feature test là gì?
- là kiểm thử tính đúng đắn của api, kết quả trả về HTTP Request json..,
test các chức năng hiệu năng và khả năng chịu tải của ứng dụng

Tại sao cần phải có test?
- Hạn chế lỗi, duy trì sự ổn định phần mềm
- Phát hiện các thuật toán không hiệu quả, khiến chức năng bị timeout
- Phát hiện các vấn đề thiết kết
- Phát hiện các lỗi nghiệm trọng có thể xảy ra trong các trường hợp hiếm gặp

Đặt tên file
- Theo chức năng cần test + hậu tố Test. Vd: php artisan make: ClassNameTest

Đặt tên hàm
- phần comment phải có @test, tên hàm sẽ mô tả case xảy ra mình cần test
ở dạng snack_case

/** @test */
public function snack_case_method()
{


}







+ git init: khởi tạo repository
+ git branch: xem danh sách nhánh
+ git branch name_new_branch: tạo 1 nhánh mới
+ git checkout name_branch: di chuyển sang nhánh khác
+ git checkout -b name_new_brach: tạo nhánh mới và di chuyển sang nhánh vừa tạo
+ git status: kiểm tra sự thay đổi trên git
+ git add name_file: đưa 1 file lên 1 nhánh (lưu lịch sử)
+ git commit -m : chính thức đưa file lên nhánh
+ git merge ten_nhanh_merge: meger một nhánh khác trên một nhánh đang đứng
+ git branch -d name_branch: xoá 1 nhánh
+ git branch -D name_branch: xoá 1 nhánh có sự thay đổi nhưng chưa merge
+ git log: xem lịch sử trên 1 nhánh
+ git commit --amend: sửa lại commit hoặc add thêm file cho commit đã commit gần nhất
+ git reset --soft HEAD~1: quay lại 1 commit đã commit trước đó, và giữ lại những thay đổi ở hiện tại
+ get reset --soft HEAD~1: quay lại đúng trạng thái commit lần trước của mình
+ git clean --force: xoá hết các file chưa được commit
- thay đổi tên tác giả của commit
 + git config user.name "Nguyen Van A"
 + git config user.email vana@gmal.com
 + git commit --amend --reset-author
